// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Transfer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Transfer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTransfer(bb:flatbuffers.ByteBuffer, obj?:Transfer):Transfer {
  return (obj || new Transfer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTransfer(bb:flatbuffers.ByteBuffer, obj?:Transfer):Transfer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Transfer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

pid():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

n():string|null
n(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
n(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

c():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

a():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

h():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

w():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

s():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

wk():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

p():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

f():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

st():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

pc():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

tc():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

ps():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

kp():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

df():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

pm():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

sr():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

si():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

bi():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

ss():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

ass():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

dss():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mss():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

gss():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

tt():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startTransfer(builder:flatbuffers.Builder) {
  builder.startObject(27);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addPid(builder:flatbuffers.Builder, pid:number) {
  builder.addFieldInt32(1, pid, 0);
}

static addN(builder:flatbuffers.Builder, nOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nOffset, 0);
}

static addC(builder:flatbuffers.Builder, c:number) {
  builder.addFieldInt32(3, c, 0);
}

static addA(builder:flatbuffers.Builder, a:number) {
  builder.addFieldInt32(4, a, 0);
}

static addH(builder:flatbuffers.Builder, h:number) {
  builder.addFieldInt32(5, h, 0);
}

static addW(builder:flatbuffers.Builder, w:number) {
  builder.addFieldInt32(6, w, 0);
}

static addS(builder:flatbuffers.Builder, s:number) {
  builder.addFieldInt32(7, s, 0);
}

static addWk(builder:flatbuffers.Builder, wk:number) {
  builder.addFieldInt32(8, wk, 0);
}

static addP(builder:flatbuffers.Builder, p:number) {
  builder.addFieldInt32(9, p, 0);
}

static addF(builder:flatbuffers.Builder, f:number) {
  builder.addFieldInt32(10, f, 0);
}

static addSt(builder:flatbuffers.Builder, st:number) {
  builder.addFieldInt32(11, st, 0);
}

static addPc(builder:flatbuffers.Builder, pc:number) {
  builder.addFieldInt32(12, pc, 0);
}

static addTc(builder:flatbuffers.Builder, tc:number) {
  builder.addFieldInt32(13, tc, 0);
}

static addPs(builder:flatbuffers.Builder, ps:number) {
  builder.addFieldInt32(14, ps, 0);
}

static addKp(builder:flatbuffers.Builder, kp:number) {
  builder.addFieldInt32(15, kp, 0);
}

static addDf(builder:flatbuffers.Builder, df:number) {
  builder.addFieldInt32(16, df, 0);
}

static addPm(builder:flatbuffers.Builder, pm:number) {
  builder.addFieldInt32(17, pm, 0);
}

static addSr(builder:flatbuffers.Builder, sr:number) {
  builder.addFieldInt32(18, sr, 0);
}

static addSi(builder:flatbuffers.Builder, si:number) {
  builder.addFieldInt32(19, si, 0);
}

static addBi(builder:flatbuffers.Builder, bi:number) {
  builder.addFieldInt32(20, bi, 0);
}

static addSs(builder:flatbuffers.Builder, ss:number) {
  builder.addFieldInt32(21, ss, 0);
}

static addAss(builder:flatbuffers.Builder, ass:number) {
  builder.addFieldInt32(22, ass, 0);
}

static addDss(builder:flatbuffers.Builder, dss:number) {
  builder.addFieldInt32(23, dss, 0);
}

static addMss(builder:flatbuffers.Builder, mss:number) {
  builder.addFieldInt32(24, mss, 0);
}

static addGss(builder:flatbuffers.Builder, gss:number) {
  builder.addFieldInt32(25, gss, 0);
}

static addTt(builder:flatbuffers.Builder, tt:bigint) {
  builder.addFieldInt64(26, tt, BigInt('0'));
}

static endTransfer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTransfer(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, pid:number, nOffset:flatbuffers.Offset, c:number, a:number, h:number, w:number, s:number, wk:number, p:number, f:number, st:number, pc:number, tc:number, ps:number, kp:number, df:number, pm:number, sr:number, si:number, bi:number, ss:number, ass:number, dss:number, mss:number, gss:number, tt:bigint):flatbuffers.Offset {
  Transfer.startTransfer(builder);
  Transfer.addId(builder, idOffset);
  Transfer.addPid(builder, pid);
  Transfer.addN(builder, nOffset);
  Transfer.addC(builder, c);
  Transfer.addA(builder, a);
  Transfer.addH(builder, h);
  Transfer.addW(builder, w);
  Transfer.addS(builder, s);
  Transfer.addWk(builder, wk);
  Transfer.addP(builder, p);
  Transfer.addF(builder, f);
  Transfer.addSt(builder, st);
  Transfer.addPc(builder, pc);
  Transfer.addTc(builder, tc);
  Transfer.addPs(builder, ps);
  Transfer.addKp(builder, kp);
  Transfer.addDf(builder, df);
  Transfer.addPm(builder, pm);
  Transfer.addSr(builder, sr);
  Transfer.addSi(builder, si);
  Transfer.addBi(builder, bi);
  Transfer.addSs(builder, ss);
  Transfer.addAss(builder, ass);
  Transfer.addDss(builder, dss);
  Transfer.addMss(builder, mss);
  Transfer.addGss(builder, gss);
  Transfer.addTt(builder, tt);
  return Transfer.endTransfer(builder);
}
}
